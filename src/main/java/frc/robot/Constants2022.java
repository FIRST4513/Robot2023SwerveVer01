// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.kinematics.SwerveDriveKinematics;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.math.util.Units;

public final class Constants2022 {
    // ***************************** SwerveModule Constants **********************************
    public static final class SwerveModuleConstants {
        // Drive Wheel Constants
        public static final double kWheelDiameterInches = 4.0;        
        public static final double kWheelDiameterMeters = Units.inchesToMeters(kWheelDiameterInches);
        public static final double kWheelCircInches = 12.56;         
        public static final double kWheelCircMeters = 0.319024; 
    
        // ------------------------  Drive Motor/Encoder Constants  ----------------------
        //
        //      4096 Motor Encoder Counts per MOTOR revolution
        //    * 6.75 gear ratio - Motor revolutions to 1 wheel revolution
        //  --------
        //  = 27,648 Motor Encoder Counts Per WHEEL Revolution
        // 
        //      4.00  Inches Wheel Diameter
        //     12.56 Inches Wheel Circumfrence
        //      0.319024 Meters Wheel Circumfrence
        //   / 27648 Divide by Motor Encoder Counts Per Wheel Rotation
        //  --------
        //   = 0.0000115387731 Meters Traveled Per Motor Encoder Count
        //
        // Note: inch * 0.0254 = meters.
        // Note: Meter * 39.3701 = Inches
        // Note: radians per Encoder Count (1 degree = pi/180 = 0.01745)
        //
        // ****************************************************************
        public static final double kDriveMotorGearRatio = 1 / 6.75;
        public static final double kDriveEncoderCountsPerRev = 4096;
        // public static final double kDriveEncoderDistancePerUnitMeters = 0.0000115387731;
        public static final double kDriveEncoderDistancePerUnitMeters = -0.0000212777;

        public static final double kDriveEncoderRot2Meter = kDriveMotorGearRatio * Math.PI * kWheelDiameterMeters; // ???
        public static final double kDriveEncoderRPM2MeterPerSec = kDriveEncoderRot2Meter / 60;                     // ??

        // ------------------------  Turning Motor/Encoder Constants  ----------------------
        // This motors Encoder is only useful for wheel turning VELOCITY. Not for POSITION!
        //
        //        4096 Motor Encoder Counts per MOTOR revolution
        //    * 21.428 gear ratio - Motor revolutions to 1 wheel rotation through 360 degrees (150/7 : 1)
        //  ==========
        //  =   87,769  Motor Encoder Counts Per WHEEL Rotation through 360 degrees
        //
        //        360 degrees 
        //   / 87,769 Divide by Motor Encoder Counts Per WHEEL Rotation
        //  =========
        //  = 0.00410167 degrees per Encoder Count
        //                  radians per Encoder Count (1 degree = pi/180 = 0.01745)
        // 
        // ****************************************************************
        public static final double kTurningMotorGearRatio = 1 / 21.428;     // Spec Sheet 150/7 : 1
        public static final double kTurningMotorEncoderCountsPerRev = 4096;
        public static final double kTurningEncoderDegreesPerEncoderCount = 0.00410167;
        public static final double kTurningEncoderRadiansPerEncoderCount = Math.toRadians(kTurningEncoderDegreesPerEncoderCount);

        public static final double kTurningEncoderRot2Rad = kTurningMotorGearRatio * 2 * Math.PI;   // ?????????????
        public static final double kTurningEncoderRPM2RadPerSec = kTurningEncoderRot2Rad / 60;  // ?????????????

        // ------------------------  PID Constant  ------------------------------
        public static final double kPTurning = 0.5;
    }

    // ***************************** DriveTrain Constants **********************************
    public static final class DriveTrainConstants {

        // Drivetrain Kinematics
        public static final double kTrackWidth = Units.inchesToMeters(23.75); // Between right and left wheels
        public static final double kWheelBase = Units.inchesToMeters(23.75);  // Between front and back wheels

        public static final SwerveDriveKinematics kDriveKinematics = new SwerveDriveKinematics(
                // Front Left
                new Translation2d(kWheelBase / 2.0, kTrackWidth / 2.0),
                // Front Right
                new Translation2d(kWheelBase / 2.0, -kTrackWidth / 2.0),
                // Back Left
                new Translation2d(-kWheelBase / 2.0, kTrackWidth / 2.0),
                // Back Right
                new Translation2d(-kWheelBase / 2.0, -kTrackWidth / 2.0));

        // Front Left Swerve Drive Configs (CAN ID's and various flags and offsets)
        public static final int     kFrontLeftDriveMotorPort = 1;
        public static final boolean kFrontLeftDriveEncoderReversed = false;

        public static final int     kFrontLeftTurningMotorPort = 5;
        public static final boolean kFrontLeftTurningEncoderReversed = true;

        public static final int     kFrontLeftDriveAbsoluteEncoderPort = 9;
        public static final double  kFrontLeftDriveAbsoluteEncoderOffsetRad = 2.495781697332859;
        public static final boolean kFrontLeftDriveAbsoluteEncoderReversed = false;

        // Front Right Swerve Drive
        public static final int     kFrontRightDriveMotorPort = 2;
        public static final boolean kFrontRightDriveEncoderReversed = true;

        public static final int     kFrontRightTurningMotorPort = 6;
        public static final boolean kFrontRightTurningEncoderReversed = true;

        public static final int     kFrontRightDriveAbsoluteEncoderPort = 10;
        public static final double  kFrontRightDriveAbsoluteEncoderOffsetRad = 3.676944516599178;
        public static final boolean kFrontRightDriveAbsoluteEncoderReversed = false;

        // Back Left Swerve Drive
        public static final int     kBackLeftDriveMotorPort = 3;
        public static final boolean kBackLeftDriveEncoderReversed = false;

        public static final int     kBackLeftTurningMotorPort = 7;
        public static final boolean kBackLeftTurningEncoderReversed = true;

        public static final int     kBackLeftDriveAbsoluteEncoderPort = 11;
        public static final double  kBackLeftDriveAbsoluteEncoderOffsetRad = 5.036048747599125;
        public static final boolean kBackLeftDriveAbsoluteEncoderReversed = false;

        // Back Right Swerve Drive
        public static final int     kBackRightDriveMotorPort = 4;
        public static final boolean kBackRightDriveEncoderReversed = true;

        public static final int     kBackRightTurningMotorPort = 8;
        public static final boolean kBackRightTurningEncoderReversed = true;

        public static final int     kBackRightDriveAbsoluteEncoderPort = 12;
        public static final double  kBackRightDriveAbsoluteEncoderOffsetRad = 2.460500210523605;
        public static final boolean kBackRightDriveAbsoluteEncoderReversed = false;

        // The maximum velocity of the robot in meters per second.
        // This is a measure of how fast the robot should be able to drive in a straight line.
        // The formula for calculating the theoretical maximum velocity is:
        // <Motor free speed RPM> / 60 * <Drive reduction> * <Wheel diameter meters> * pi
        //
        //       6380.0  Falcon 500 RPM at free rotation
        //      /  6.75   MK4i Swerve Drive middle speed gear ratio
        //     ========
        //  =  945.1851 Max Wheel RPM
        //     /     60 Seconds 
        //    =========
        //  =    15.753 Wheel Revs Per Second
        //     *  12.56 Wheel Circumfrence (Inches) 
        //    =========
        //  =   197.858 Velocity per Second in Inches
        //   /       12 Inches / Foot
        //    =========
        //  =    16.488 Feet Per Second
        //  =    5.0256 Meters Per Second
        //

        public static final double kPhysicalMaxSpeedMetersPerSecond = 5;
        public static final double kPhysicalMaxAngularSpeedRadiansPerSecond = 2 * 2 * Math.PI;

        // Reduce the Max rates for Teleop - Slower for better Control ( 1/4 Too Much ?????)
        public static final double kTeleDriveThrottle = 0.25;       // Limit speeds to 1/4 Normal
        public static final double kTeleDriveMaxSpeedMetersPerSecond = kPhysicalMaxSpeedMetersPerSecond * kTeleDriveThrottle;
        public static final double kTeleDriveMaxAngularSpeedRadiansPerSecond = //
                kPhysicalMaxAngularSpeedRadiansPerSecond * kTeleDriveThrottle;
        public static final double kTeleDriveMaxAccelerationUnitsPerSecond = 3;
        public static final double kTeleDriveMaxAngularAccelerationUnitsPerSecond = 3;
    }

    
    // ***************************** Autonomous Constants **********************************
    public static final class AutoConstants {
        public static final double kMaxSpeedMetersPerSecond = DriveTrainConstants.kPhysicalMaxSpeedMetersPerSecond / 5;  // was /4
        public static final double kMaxAngularSpeedRadiansPerSecond = //
        DriveTrainConstants.kPhysicalMaxAngularSpeedRadiansPerSecond / 10;
        public static final double kMaxAccelerationMetersPerSecondSquared = 0.7;  // was 3
        public static final double kMaxAngularAccelerationRadiansPerSecondSquared = Math.PI / 4;
        
        // public static final double kPXController = 1.5;
        public static final double kPXController = 0.5;     // Limit for parctive chassi.

        public static final double kPYController = 1.5;
        public static final double kPThetaController = 3;

        public static final TrapezoidProfile.Constraints kThetaControllerConstraints = //
                new TrapezoidProfile.Constraints(
                        kMaxAngularSpeedRadiansPerSecond,
                        kMaxAngularAccelerationRadiansPerSecondSquared);
    }

    
    // ***************************** OI Constants **********************************
    public static final class OIConstants {
        public static final int kDriverControllerPort = 0;

        public static final int kDriverYAxis = 1;
        public static final int kDriverXAxis = 0;
        public static final int kDriverRotAxis = 4;
        public static final int kDriverFieldOrientedButtonIdx = 1;

        public static final double kDeadband = 0.05;
    }
}

